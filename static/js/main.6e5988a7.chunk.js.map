{"version":3,"sources":["components/Countries/countries.module.scss","components/News/news.module.scss","components/Loading/loading.module.scss","components/Error/error.module.scss","utils/useNews.js","components/Loading/loading.js","components/Error/error.js","components/News/news.js","components/Countries/countries.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useNews","url","useState","news","setNews","error","setError","loading","setLoading","useEffect","a","fetch","then","response","json","catch","err","data","articles","fetchData","Loading","className","styles","Error","News","list_news","map","i","key","title","href","target","rel","substring","lastIndexOf","source","name","Countries","country","setCountry","selection","onChange","e","value","console","log","countries","code","undefined","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"62DACAA,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,0B,iBCA9BD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,sOCuBXC,EAtBC,SAAAC,GAAQ,IAAD,EACKC,mBAAS,IADd,mBACZC,EADY,KACNC,EADM,OAEOF,qBAFP,mBAEZG,EAFY,KAELC,EAFK,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,KAmBnB,OAdAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,6DACIF,GAAW,GACXF,IAFJ,SAGuBK,MAAMV,GACpBW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GACHV,EAASU,MANrB,OAGUC,EAHV,OAQIb,EAAQa,EAAKC,UACbV,GAAW,GATf,4CADY,uBAAC,WAAD,wBAYZW,KACD,CAAClB,IACG,CAAEE,OAAME,QAAOE,Y,gBCVXa,EARC,WACZ,OACI,yBAAKC,UAAWC,IAAOf,SACnB,2C,iBCMGgB,EATD,WACV,OACI,yBAAKF,UAAWC,IAAOjB,OACnB,oDACA,iDCuBGmB,EAxBF,SAAC,GAAa,IAAXvB,EAAU,EAAVA,IAAU,EACWD,EAAQC,GAAjCE,EADc,EACdA,KAAME,EADQ,EACRA,MACd,OAFsB,EACDE,QACD,kBAAC,EAAD,MAChBF,EAAc,kBAAC,EAAD,MAEd,yBAAKgB,UAAWC,IAAOG,WACnB,yBAAKJ,UAAU,aACVlB,EAAKuB,KAAI,SAAAC,GAAC,OACP,yBAAKC,IAAKD,EAAEE,MAAOR,UAAU,qCACzB,uBAAGS,KAAMH,EAAE1B,IAAK8B,OAAO,SAASC,IAAI,uBAChC,2BACKL,EAAEE,MAAMI,UAAU,EAAGN,EAAEE,MAAMK,YAAY,MAD9C,MACwD,IACpD,2BAAOb,UAAU,cACZM,EAAEQ,OAAOC,eCoB/BC,EAhCG,WAAO,IAAD,EACUnC,qBADV,mBACboC,EADa,KACJC,EADI,KAGpB,OACI,yBAAKlB,UAAWC,IAAOkB,WACnB,yBAAKnB,UAAU,MAAf,YAEI,4BACIA,UAAU,sBACVoB,SAAU,SAAAC,GACNH,EAAWG,EAAEX,OAAOY,OACpBC,QAAQC,IAAIP,KAGfQ,EAAUpB,KAAI,SAAAC,GAAC,OACZ,4BAAQC,IAAKD,EAAEoB,KAAMJ,MAAOhB,EAAEoB,MACzBpB,EAAES,gBAKLY,IAAZV,GAAuC,cAAZA,EACzB,uBAAGjB,UAAU,KAAK4B,MAAO,CAAC,UAAa,MAAO,MAAS,YAAvD,yCAEA,kBAAC,EAAD,CACIhD,IAAG,sDAAiDqC,EAAjD,mBA3BP,wCCYDY,EAbH,WACR,OACI,yBAAK7B,UAAU,OACX,wBAAIA,UAAU,SACV,0BAAMA,UAAU,QAAhB,mBADJ,uCAIA,kBAAC,EAAD,MACA,yBAAKA,UAAU,UAAf,6B,MCAQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAV,GACLuC,QAAQvC,MAAMA,EAAM4D,c","file":"static/js/main.6e5988a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selection\":\"countries_selection__22nxi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_news\":\"news_list_news__2oJdQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_loading__1GRCx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"error_error__21KV4\"};","import { useState, useEffect } from \"react\";\n\nconst useNews = url => {\n    const [news, setNews] = useState([]);\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        async function fetchData() {\n            setLoading(true);\n            setError();\n            const data = await fetch(url)\n                .then(response => response.json())\n                .catch(err => {\n                    setError(err);\n                });\n            setNews(data.articles);\n            setLoading(false);\n        }\n        fetchData();\n    }, [url]);\n    return { news, error, loading };\n};\n\nexport default useNews;\n","import React from 'react';\nimport styles from './loading.module.scss';\n\nconst Loading = () => {\n    return (\n        <div className={styles.loading}>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default Loading;\n","import React from 'react';\nimport styles from './error.module.scss';\n\nconst Error = () => {\n    return (\n        <div className={styles.error}>\n            <p>Something went wrong!</p>\n            <p>Please try again</p>\n        </div>\n    )\n}\n\nexport default Error;\n","import React from \"react\";\nimport styles from \"./news.module.scss\";\nimport useNews from \"../../utils/useNews\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\n\nconst News = ({ url }) => {\n    const { news, error, loading } = useNews(url);\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n    return (\n        <div className={styles.list_news}>\n            <div className=\"container\">\n                {news.map(i => (\n                    <div key={i.title} className=\"btn btn-light btn-block text-left\">\n                        <a href={i.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <p>\n                                {i.title.substring(0, i.title.lastIndexOf('-'))} - {\" \"}\n                                <small className=\"text-muted\">\n                                    {i.source.name}\n                                </small>\n                            </p>\n                        </a>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default News;\n","import React, { useState } from \"react\";\nimport countries from \"./countries.json\";\nimport styles from \"./countries.module.scss\";\nimport News from \"../News\";\n\nconst API_KEY = \"201c0a6fcbba403e92984f023beffbaf\";\n\nconst Countries = () => {\n    const [country, setCountry] = useState();\n\n    return (\n        <div className={styles.selection}>\n            <div className=\"h3\">\n                News from\n                <select\n                    className=\"btn form-control-sm\"\n                    onChange={e => {\n                        setCountry(e.target.value);\n                        console.log(country);\n                    }}\n                >\n                    {countries.map(i => (\n                        <option key={i.code} value={i.code}>\n                            {i.name}\n                        </option>\n                    ))}\n                </select>\n            </div>\n            {(country === undefined) || (country === \"undefined\") ? (\n                <p className=\"h5\" style={{'marginTop': '2em', 'color': '#3282b8'}}>Please choose a country from the list</p>\n            ) : (\n                <News\n                    url={`http://newsapi.org/v2/top-headlines?country=${country}&apiKey=${API_KEY}`}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Countries;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Countries from \"./components/Countries\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <h2 className=\"title\">\n                <span className=\"bold\">World Wide News</span> - All the latest news in one\n                place\n            </h2>\n            <Countries />\n            <div className=\"footer\">Â© Alexandre Salsinha</div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}